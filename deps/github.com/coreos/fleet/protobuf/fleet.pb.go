// Code generated by protoc-gen-gogo.
// source: github.com/coreos/fleet/rpc/fleet.proto
// DO NOT EDIT!

/*
	Package rpc is a generated protocol buffer package.

	It is generated from these files:
		github.com/coreos/fleet/rpc/fleet.proto

	It has these top-level messages:
		MachineProperties
		UpdatedState
		UnitStateFilter
		UnitFilter
		ScheduleUnitRequest
		UnscheduleUnitRequest
		SaveUnitStateRequest
		Heartbeat
		GenericReply
		Units
		UnitStates
		UnitState
		ScheduledUnits
		ScheduledUnit
		UnitName
		Unit
		MaybeScheduledUnit
		MaybeUnit
		NotFound
		UnitFile
		UnitOption
*/
package rpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TargetState int32

const (
	TargetState_INACTIVE TargetState = 0
	TargetState_LOADED   TargetState = 1
	TargetState_LAUNCHED TargetState = 2
)

var TargetState_name = map[int32]string{
	0: "INACTIVE",
	1: "LOADED",
	2: "LAUNCHED",
}
var TargetState_value = map[string]int32{
	"INACTIVE": 0,
	"LOADED":   1,
	"LAUNCHED": 2,
}

type MachineProperties struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MachineProperties) Reset()      { *m = MachineProperties{} }
func (*MachineProperties) ProtoMessage() {}

type UpdatedState struct {
	UnitIds []string `protobuf:"bytes,1,rep,name=unit_ids" json:"unit_ids,omitempty"`
}

func (m *UpdatedState) Reset()      { *m = UpdatedState{} }
func (*UpdatedState) ProtoMessage() {}

type UnitStateFilter struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hash        string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	LoadState   string `protobuf:"bytes,3,opt,name=load_state,proto3" json:"load_state,omitempty"`
	ActiveState string `protobuf:"bytes,4,opt,name=active_state,proto3" json:"active_state,omitempty"`
	SubState    string `protobuf:"bytes,5,opt,name=sub_state,proto3" json:"sub_state,omitempty"`
	MachineID   string `protobuf:"bytes,6,opt,name=machine_id,proto3" json:"machine_id,omitempty"`
}

func (m *UnitStateFilter) Reset()      { *m = UnitStateFilter{} }
func (*UnitStateFilter) ProtoMessage() {}

type UnitFilter struct {
	MachineID string `protobuf:"bytes,1,opt,name=machine_id,proto3" json:"machine_id,omitempty"`
}

func (m *UnitFilter) Reset()      { *m = UnitFilter{} }
func (*UnitFilter) ProtoMessage() {}

type ScheduleUnitRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MachineID string `protobuf:"bytes,2,opt,name=machine_id,proto3" json:"machine_id,omitempty"`
}

func (m *ScheduleUnitRequest) Reset()      { *m = ScheduleUnitRequest{} }
func (*ScheduleUnitRequest) ProtoMessage() {}

type UnscheduleUnitRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MachineID string `protobuf:"bytes,2,opt,name=machine_id,proto3" json:"machine_id,omitempty"`
}

func (m *UnscheduleUnitRequest) Reset()      { *m = UnscheduleUnitRequest{} }
func (*UnscheduleUnitRequest) ProtoMessage() {}

type SaveUnitStateRequest struct {
	Name  string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State *UnitState `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	TTL   int32      `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (m *SaveUnitStateRequest) Reset()      { *m = SaveUnitStateRequest{} }
func (*SaveUnitStateRequest) ProtoMessage() {}

func (m *SaveUnitStateRequest) GetState() *UnitState {
	if m != nil {
		return m.State
	}
	return nil
}

type Heartbeat struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MachineID string `protobuf:"bytes,2,opt,name=machine_id,proto3" json:"machine_id,omitempty"`
	TTL       int32  `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (m *Heartbeat) Reset()      { *m = Heartbeat{} }
func (*Heartbeat) ProtoMessage() {}

type GenericReply struct {
}

func (m *GenericReply) Reset()      { *m = GenericReply{} }
func (*GenericReply) ProtoMessage() {}

type Units struct {
	Units []Unit `protobuf:"bytes,1,rep,name=units" json:"units"`
}

func (m *Units) Reset()      { *m = Units{} }
func (*Units) ProtoMessage() {}

func (m *Units) GetUnits() []Unit {
	if m != nil {
		return m.Units
	}
	return nil
}

type UnitStates struct {
	UnitStates []*UnitState `protobuf:"bytes,1,rep,name=unit_states" json:"unit_states,omitempty"`
}

func (m *UnitStates) Reset()      { *m = UnitStates{} }
func (*UnitStates) ProtoMessage() {}

func (m *UnitStates) GetUnitStates() []*UnitState {
	if m != nil {
		return m.UnitStates
	}
	return nil
}

type UnitState struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hash        string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	LoadState   string `protobuf:"bytes,3,opt,name=load_state,proto3" json:"load_state,omitempty"`
	ActiveState string `protobuf:"bytes,4,opt,name=active_state,proto3" json:"active_state,omitempty"`
	SubState    string `protobuf:"bytes,5,opt,name=sub_state,proto3" json:"sub_state,omitempty"`
	MachineID   string `protobuf:"bytes,6,opt,name=machine_id,proto3" json:"machine_id,omitempty"`
}

func (m *UnitState) Reset()      { *m = UnitState{} }
func (*UnitState) ProtoMessage() {}

type ScheduledUnits struct {
	Units []ScheduledUnit `protobuf:"bytes,1,rep,name=units" json:"units"`
}

func (m *ScheduledUnits) Reset()      { *m = ScheduledUnits{} }
func (*ScheduledUnits) ProtoMessage() {}

func (m *ScheduledUnits) GetUnits() []ScheduledUnit {
	if m != nil {
		return m.Units
	}
	return nil
}

type ScheduledUnit struct {
	Name         string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CurrentState TargetState `protobuf:"varint,2,opt,name=current_state,proto3,enum=rpc.TargetState" json:"current_state,omitempty"`
	MachineID    string      `protobuf:"bytes,3,opt,name=machine_id,proto3" json:"machine_id,omitempty"`
}

func (m *ScheduledUnit) Reset()      { *m = ScheduledUnit{} }
func (*ScheduledUnit) ProtoMessage() {}

type UnitName struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *UnitName) Reset()      { *m = UnitName{} }
func (*UnitName) ProtoMessage() {}

type Unit struct {
	Name         string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Unit         UnitFile    `protobuf:"bytes,2,opt,name=unit" json:"unit"`
	DesiredState TargetState `protobuf:"varint,3,opt,name=desired_state,proto3,enum=rpc.TargetState" json:"desired_state,omitempty"`
}

func (m *Unit) Reset()      { *m = Unit{} }
func (*Unit) ProtoMessage() {}

func (m *Unit) GetUnit() UnitFile {
	if m != nil {
		return m.Unit
	}
	return UnitFile{}
}

type MaybeScheduledUnit struct {
	// Types that are valid to be assigned to IsScheduled:
	//	*MaybeScheduledUnit_Unit
	//	*MaybeScheduledUnit_Notfound
	IsScheduled isMaybeScheduledUnit_IsScheduled `protobuf_oneof:"is_scheduled"`
}

func (m *MaybeScheduledUnit) Reset()      { *m = MaybeScheduledUnit{} }
func (*MaybeScheduledUnit) ProtoMessage() {}

type isMaybeScheduledUnit_IsScheduled interface {
	isMaybeScheduledUnit_IsScheduled()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type MaybeScheduledUnit_Unit struct {
	Unit *ScheduledUnit `protobuf:"bytes,1,opt,name=unit,oneof"`
}
type MaybeScheduledUnit_Notfound struct {
	Notfound *NotFound `protobuf:"bytes,2,opt,name=notfound,oneof"`
}

func (*MaybeScheduledUnit_Unit) isMaybeScheduledUnit_IsScheduled()     {}
func (*MaybeScheduledUnit_Notfound) isMaybeScheduledUnit_IsScheduled() {}

func (m *MaybeScheduledUnit) GetIsScheduled() isMaybeScheduledUnit_IsScheduled {
	if m != nil {
		return m.IsScheduled
	}
	return nil
}

func (m *MaybeScheduledUnit) GetUnit() *ScheduledUnit {
	if x, ok := m.GetIsScheduled().(*MaybeScheduledUnit_Unit); ok {
		return x.Unit
	}
	return nil
}

func (m *MaybeScheduledUnit) GetNotfound() *NotFound {
	if x, ok := m.GetIsScheduled().(*MaybeScheduledUnit_Notfound); ok {
		return x.Notfound
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MaybeScheduledUnit) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _MaybeScheduledUnit_OneofMarshaler, _MaybeScheduledUnit_OneofUnmarshaler, []interface{}{
		(*MaybeScheduledUnit_Unit)(nil),
		(*MaybeScheduledUnit_Notfound)(nil),
	}
}

func _MaybeScheduledUnit_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MaybeScheduledUnit)
	// is_scheduled
	switch x := m.IsScheduled.(type) {
	case *MaybeScheduledUnit_Unit:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Unit); err != nil {
			return err
		}
	case *MaybeScheduledUnit_Notfound:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Notfound); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MaybeScheduledUnit.IsScheduled has unexpected type %T", x)
	}
	return nil
}

func _MaybeScheduledUnit_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MaybeScheduledUnit)
	switch tag {
	case 1: // is_scheduled.unit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ScheduledUnit)
		err := b.DecodeMessage(msg)
		m.IsScheduled = &MaybeScheduledUnit_Unit{msg}
		return true, err
	case 2: // is_scheduled.notfound
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NotFound)
		err := b.DecodeMessage(msg)
		m.IsScheduled = &MaybeScheduledUnit_Notfound{msg}
		return true, err
	default:
		return false, nil
	}
}

type MaybeUnit struct {
	// Types that are valid to be assigned to HasUnit:
	//	*MaybeUnit_Unit
	//	*MaybeUnit_Notfound
	HasUnit isMaybeUnit_HasUnit `protobuf_oneof:"has_unit"`
}

func (m *MaybeUnit) Reset()      { *m = MaybeUnit{} }
func (*MaybeUnit) ProtoMessage() {}

type isMaybeUnit_HasUnit interface {
	isMaybeUnit_HasUnit()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type MaybeUnit_Unit struct {
	Unit *Unit `protobuf:"bytes,1,opt,name=unit,oneof"`
}
type MaybeUnit_Notfound struct {
	Notfound *NotFound `protobuf:"bytes,2,opt,name=notfound,oneof"`
}

func (*MaybeUnit_Unit) isMaybeUnit_HasUnit()     {}
func (*MaybeUnit_Notfound) isMaybeUnit_HasUnit() {}

func (m *MaybeUnit) GetHasUnit() isMaybeUnit_HasUnit {
	if m != nil {
		return m.HasUnit
	}
	return nil
}

func (m *MaybeUnit) GetUnit() *Unit {
	if x, ok := m.GetHasUnit().(*MaybeUnit_Unit); ok {
		return x.Unit
	}
	return nil
}

func (m *MaybeUnit) GetNotfound() *NotFound {
	if x, ok := m.GetHasUnit().(*MaybeUnit_Notfound); ok {
		return x.Notfound
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MaybeUnit) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _MaybeUnit_OneofMarshaler, _MaybeUnit_OneofUnmarshaler, []interface{}{
		(*MaybeUnit_Unit)(nil),
		(*MaybeUnit_Notfound)(nil),
	}
}

func _MaybeUnit_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MaybeUnit)
	// has_unit
	switch x := m.HasUnit.(type) {
	case *MaybeUnit_Unit:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Unit); err != nil {
			return err
		}
	case *MaybeUnit_Notfound:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Notfound); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MaybeUnit.HasUnit has unexpected type %T", x)
	}
	return nil
}

func _MaybeUnit_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MaybeUnit)
	switch tag {
	case 1: // has_unit.unit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Unit)
		err := b.DecodeMessage(msg)
		m.HasUnit = &MaybeUnit_Unit{msg}
		return true, err
	case 2: // has_unit.notfound
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NotFound)
		err := b.DecodeMessage(msg)
		m.HasUnit = &MaybeUnit_Notfound{msg}
		return true, err
	default:
		return false, nil
	}
}

type NotFound struct {
}

func (m *NotFound) Reset()      { *m = NotFound{} }
func (*NotFound) ProtoMessage() {}

type UnitFile struct {
	UnitOptions []UnitOption `protobuf:"bytes,1,rep,name=unit_options" json:"unit_options"`
}

func (m *UnitFile) Reset()      { *m = UnitFile{} }
func (*UnitFile) ProtoMessage() {}

func (m *UnitFile) GetUnitOptions() []UnitOption {
	if m != nil {
		return m.UnitOptions
	}
	return nil
}

type UnitOption struct {
	Section string `protobuf:"bytes,1,opt,name=section,proto3" json:"section,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *UnitOption) Reset()      { *m = UnitOption{} }
func (*UnitOption) ProtoMessage() {}

// Health chechk for the Registry serviceName
type HealthCheckResponse_ServingStatus int32

const (
	HealthCheckResponse_UNKNOWN     HealthCheckResponse_ServingStatus = 0
	HealthCheckResponse_SERVING     HealthCheckResponse_ServingStatus = 1
	HealthCheckResponse_NOT_SERVING HealthCheckResponse_ServingStatus = 2
)

var HealthCheckResponse_ServingStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "SERVING",
	2: "NOT_SERVING",
}
var HealthCheckResponse_ServingStatus_value = map[string]int32{
	"UNKNOWN":     0,
	"SERVING":     1,
	"NOT_SERVING": 2,
}

func (x HealthCheckResponse_ServingStatus) String() string {
	return proto.EnumName(HealthCheckResponse_ServingStatus_name, int32(x))
}
func (HealthCheckResponse_ServingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

type HealthCheckRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *HealthCheckRequest) Reset()                    { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()               {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HealthCheckResponse struct {
	Status HealthCheckResponse_ServingStatus `protobuf:"varint,1,opt,name=status,enum=rpc.HealthCheckResponse_ServingStatus" json:"status,omitempty"`
}

func (m *HealthCheckResponse) Reset()                    { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()               {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*MachineProperties)(nil), "rpc.MachineProperties")
	proto.RegisterType((*UpdatedState)(nil), "rpc.UpdatedState")
	proto.RegisterType((*UnitStateFilter)(nil), "rpc.UnitStateFilter")
	proto.RegisterType((*UnitFilter)(nil), "rpc.UnitFilter")
	proto.RegisterType((*ScheduleUnitRequest)(nil), "rpc.ScheduleUnitRequest")
	proto.RegisterType((*UnscheduleUnitRequest)(nil), "rpc.UnscheduleUnitRequest")
	proto.RegisterType((*SaveUnitStateRequest)(nil), "rpc.SaveUnitStateRequest")
	proto.RegisterType((*Heartbeat)(nil), "rpc.Heartbeat")
	proto.RegisterType((*GenericReply)(nil), "rpc.GenericReply")
	proto.RegisterType((*Units)(nil), "rpc.Units")
	proto.RegisterType((*UnitStates)(nil), "rpc.UnitStates")
	proto.RegisterType((*UnitState)(nil), "rpc.UnitState")
	proto.RegisterType((*ScheduledUnits)(nil), "rpc.ScheduledUnits")
	proto.RegisterType((*ScheduledUnit)(nil), "rpc.ScheduledUnit")
	proto.RegisterType((*UnitName)(nil), "rpc.UnitName")
	proto.RegisterType((*Unit)(nil), "rpc.Unit")
	proto.RegisterType((*MaybeScheduledUnit)(nil), "rpc.MaybeScheduledUnit")
	proto.RegisterType((*MaybeUnit)(nil), "rpc.MaybeUnit")
	proto.RegisterType((*NotFound)(nil), "rpc.NotFound")
	proto.RegisterType((*UnitFile)(nil), "rpc.UnitFile")
	proto.RegisterType((*UnitOption)(nil), "rpc.UnitOption")
	proto.RegisterEnum("rpc.TargetState", TargetState_name, TargetState_value)

	proto.RegisterType((*HealthCheckRequest)(nil), "rpc.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "rpc.HealthCheckResponse")
	proto.RegisterEnum("rpc.HealthCheckResponse_ServingStatus", HealthCheckResponse_ServingStatus_name, HealthCheckResponse_ServingStatus_value)
}
func (x TargetState) String() string {
	s, ok := TargetState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MachineProperties) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MachineProperties)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *UpdatedState) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdatedState)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.UnitIds) != len(that1.UnitIds) {
		return false
	}
	for i := range this.UnitIds {
		if this.UnitIds[i] != that1.UnitIds[i] {
			return false
		}
	}
	return true
}
func (this *UnitStateFilter) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnitStateFilter)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if this.LoadState != that1.LoadState {
		return false
	}
	if this.ActiveState != that1.ActiveState {
		return false
	}
	if this.SubState != that1.SubState {
		return false
	}
	if this.MachineID != that1.MachineID {
		return false
	}
	return true
}
func (this *UnitFilter) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnitFilter)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MachineID != that1.MachineID {
		return false
	}
	return true
}
func (this *ScheduleUnitRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ScheduleUnitRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.MachineID != that1.MachineID {
		return false
	}
	return true
}
func (this *UnscheduleUnitRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnscheduleUnitRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.MachineID != that1.MachineID {
		return false
	}
	return true
}
func (this *SaveUnitStateRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SaveUnitStateRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.State.Equal(that1.State) {
		return false
	}
	if this.TTL != that1.TTL {
		return false
	}
	return true
}
func (this *Heartbeat) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Heartbeat)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.MachineID != that1.MachineID {
		return false
	}
	if this.TTL != that1.TTL {
		return false
	}
	return true
}
func (this *GenericReply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GenericReply)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *Units) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Units)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Units) != len(that1.Units) {
		return false
	}
	for i := range this.Units {
		if !this.Units[i].Equal(&that1.Units[i]) {
			return false
		}
	}
	return true
}
func (this *UnitStates) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnitStates)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.UnitStates) != len(that1.UnitStates) {
		return false
	}
	for i := range this.UnitStates {
		if !this.UnitStates[i].Equal(that1.UnitStates[i]) {
			return false
		}
	}
	return true
}
func (this *UnitState) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnitState)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if this.LoadState != that1.LoadState {
		return false
	}
	if this.ActiveState != that1.ActiveState {
		return false
	}
	if this.SubState != that1.SubState {
		return false
	}
	if this.MachineID != that1.MachineID {
		return false
	}
	return true
}
func (this *ScheduledUnits) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ScheduledUnits)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Units) != len(that1.Units) {
		return false
	}
	for i := range this.Units {
		if !this.Units[i].Equal(&that1.Units[i]) {
			return false
		}
	}
	return true
}
func (this *ScheduledUnit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ScheduledUnit)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.CurrentState != that1.CurrentState {
		return false
	}
	if this.MachineID != that1.MachineID {
		return false
	}
	return true
}
func (this *UnitName) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnitName)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Unit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Unit)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Unit.Equal(&that1.Unit) {
		return false
	}
	if this.DesiredState != that1.DesiredState {
		return false
	}
	return true
}
func (this *MaybeScheduledUnit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MaybeScheduledUnit)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.IsScheduled == nil {
		if this.IsScheduled != nil {
			return false
		}
	} else if this.IsScheduled == nil {
		return false
	} else if !this.IsScheduled.Equal(that1.IsScheduled) {
		return false
	}
	return true
}
func (this *MaybeScheduledUnit_Unit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MaybeScheduledUnit_Unit)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Unit.Equal(that1.Unit) {
		return false
	}
	return true
}
func (this *MaybeScheduledUnit_Notfound) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MaybeScheduledUnit_Notfound)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Notfound.Equal(that1.Notfound) {
		return false
	}
	return true
}
func (this *MaybeUnit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MaybeUnit)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.HasUnit == nil {
		if this.HasUnit != nil {
			return false
		}
	} else if this.HasUnit == nil {
		return false
	} else if !this.HasUnit.Equal(that1.HasUnit) {
		return false
	}
	return true
}
func (this *MaybeUnit_Unit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MaybeUnit_Unit)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Unit.Equal(that1.Unit) {
		return false
	}
	return true
}
func (this *MaybeUnit_Notfound) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MaybeUnit_Notfound)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Notfound.Equal(that1.Notfound) {
		return false
	}
	return true
}
func (this *NotFound) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NotFound)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *UnitFile) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnitFile)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.UnitOptions) != len(that1.UnitOptions) {
		return false
	}
	for i := range this.UnitOptions {
		if !this.UnitOptions[i].Equal(&that1.UnitOptions[i]) {
			return false
		}
	}
	return true
}
func (this *UnitOption) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnitOption)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Section != that1.Section {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *MachineProperties) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rpc.MachineProperties{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdatedState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rpc.UpdatedState{")
	s = append(s, "UnitIds: "+fmt.Sprintf("%#v", this.UnitIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnitStateFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&rpc.UnitStateFilter{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "LoadState: "+fmt.Sprintf("%#v", this.LoadState)+",\n")
	s = append(s, "ActiveState: "+fmt.Sprintf("%#v", this.ActiveState)+",\n")
	s = append(s, "SubState: "+fmt.Sprintf("%#v", this.SubState)+",\n")
	s = append(s, "MachineID: "+fmt.Sprintf("%#v", this.MachineID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnitFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rpc.UnitFilter{")
	s = append(s, "MachineID: "+fmt.Sprintf("%#v", this.MachineID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScheduleUnitRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rpc.ScheduleUnitRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "MachineID: "+fmt.Sprintf("%#v", this.MachineID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnscheduleUnitRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rpc.UnscheduleUnitRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "MachineID: "+fmt.Sprintf("%#v", this.MachineID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SaveUnitStateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rpc.SaveUnitStateRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.State != nil {
		s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	}
	s = append(s, "TTL: "+fmt.Sprintf("%#v", this.TTL)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Heartbeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rpc.Heartbeat{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "MachineID: "+fmt.Sprintf("%#v", this.MachineID)+",\n")
	s = append(s, "TTL: "+fmt.Sprintf("%#v", this.TTL)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenericReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&rpc.GenericReply{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Units) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rpc.Units{")
	if this.Units != nil {
		s = append(s, "Units: "+strings.Replace(fmt.Sprintf("%#v", this.Units), `&`, ``, 1)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnitStates) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rpc.UnitStates{")
	if this.UnitStates != nil {
		s = append(s, "UnitStates: "+fmt.Sprintf("%#v", this.UnitStates)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnitState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&rpc.UnitState{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "LoadState: "+fmt.Sprintf("%#v", this.LoadState)+",\n")
	s = append(s, "ActiveState: "+fmt.Sprintf("%#v", this.ActiveState)+",\n")
	s = append(s, "SubState: "+fmt.Sprintf("%#v", this.SubState)+",\n")
	s = append(s, "MachineID: "+fmt.Sprintf("%#v", this.MachineID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScheduledUnits) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rpc.ScheduledUnits{")
	if this.Units != nil {
		s = append(s, "Units: "+strings.Replace(fmt.Sprintf("%#v", this.Units), `&`, ``, 1)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScheduledUnit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rpc.ScheduledUnit{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "CurrentState: "+fmt.Sprintf("%#v", this.CurrentState)+",\n")
	s = append(s, "MachineID: "+fmt.Sprintf("%#v", this.MachineID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnitName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rpc.UnitName{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Unit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rpc.Unit{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Unit: "+strings.Replace(this.Unit.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "DesiredState: "+fmt.Sprintf("%#v", this.DesiredState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MaybeScheduledUnit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rpc.MaybeScheduledUnit{")
	if this.IsScheduled != nil {
		s = append(s, "IsScheduled: "+fmt.Sprintf("%#v", this.IsScheduled)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MaybeScheduledUnit_Unit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&rpc.MaybeScheduledUnit_Unit{` +
		`Unit:` + fmt.Sprintf("%#v", this.Unit) + `}`}, ", ")
	return s
}
func (this *MaybeScheduledUnit_Notfound) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&rpc.MaybeScheduledUnit_Notfound{` +
		`Notfound:` + fmt.Sprintf("%#v", this.Notfound) + `}`}, ", ")
	return s
}
func (this *MaybeUnit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rpc.MaybeUnit{")
	if this.HasUnit != nil {
		s = append(s, "HasUnit: "+fmt.Sprintf("%#v", this.HasUnit)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MaybeUnit_Unit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&rpc.MaybeUnit_Unit{` +
		`Unit:` + fmt.Sprintf("%#v", this.Unit) + `}`}, ", ")
	return s
}
func (this *MaybeUnit_Notfound) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&rpc.MaybeUnit_Notfound{` +
		`Notfound:` + fmt.Sprintf("%#v", this.Notfound) + `}`}, ", ")
	return s
}
func (this *NotFound) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&rpc.NotFound{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnitFile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rpc.UnitFile{")
	if this.UnitOptions != nil {
		s = append(s, "UnitOptions: "+strings.Replace(fmt.Sprintf("%#v", this.UnitOptions), `&`, ``, 1)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnitOption) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rpc.UnitOption{")
	s = append(s, "Section: "+fmt.Sprintf("%#v", this.Section)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFleet(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringFleet(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Registry service

type RegistryClient interface {
	// agents should request only the locally scheduled jobs
	GetScheduledUnits(ctx context.Context, in *UnitFilter, opts ...grpc.CallOption) (*ScheduledUnits, error)
	// should _never_ be used? fleetctl only ?
	GetScheduledUnit(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*MaybeScheduledUnit, error)
	// should _never_ be used ?
	GetUnit(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*MaybeUnit, error)
	GetUnits(ctx context.Context, in *UnitFilter, opts ...grpc.CallOption) (*Units, error)
	// global status <= pretty much like list-unit-files
	GetUnitStates(ctx context.Context, in *UnitStateFilter, opts ...grpc.CallOption) (*UnitStates, error)
	ClearUnitHeartbeat(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*GenericReply, error)
	CreateUnit(ctx context.Context, in *Unit, opts ...grpc.CallOption) (*GenericReply, error)
	DestroyUnit(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*GenericReply, error)
	UnitHeartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*GenericReply, error)
	// mix heartbeat with *ttl''
	RemoveUnitState(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*GenericReply, error)
	SaveUnitState(ctx context.Context, in *SaveUnitStateRequest, opts ...grpc.CallOption) (*GenericReply, error)
	ScheduleUnit(ctx context.Context, in *ScheduleUnitRequest, opts ...grpc.CallOption) (*GenericReply, error)
	SetUnitTargetState(ctx context.Context, in *ScheduledUnit, opts ...grpc.CallOption) (*GenericReply, error)
	UnscheduleUnit(ctx context.Context, in *UnscheduleUnitRequest, opts ...grpc.CallOption) (*GenericReply, error)
	AgentEvents(ctx context.Context, in *MachineProperties, opts ...grpc.CallOption) (Registry_AgentEventsClient, error)

	Status(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) GetScheduledUnits(ctx context.Context, in *UnitFilter, opts ...grpc.CallOption) (*ScheduledUnits, error) {
	out := new(ScheduledUnits)
	err := grpc.Invoke(ctx, "/rpc.Registry/GetScheduledUnits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetScheduledUnit(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*MaybeScheduledUnit, error) {
	out := new(MaybeScheduledUnit)
	err := grpc.Invoke(ctx, "/rpc.Registry/GetScheduledUnit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetUnit(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*MaybeUnit, error) {
	out := new(MaybeUnit)
	err := grpc.Invoke(ctx, "/rpc.Registry/GetUnit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetUnits(ctx context.Context, in *UnitFilter, opts ...grpc.CallOption) (*Units, error) {
	out := new(Units)
	err := grpc.Invoke(ctx, "/rpc.Registry/GetUnits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetUnitStates(ctx context.Context, in *UnitStateFilter, opts ...grpc.CallOption) (*UnitStates, error) {
	out := new(UnitStates)
	err := grpc.Invoke(ctx, "/rpc.Registry/GetUnitStates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ClearUnitHeartbeat(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/ClearUnitHeartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) CreateUnit(ctx context.Context, in *Unit, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/CreateUnit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) DestroyUnit(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/DestroyUnit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) UnitHeartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/UnitHeartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) RemoveUnitState(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/RemoveUnitState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SaveUnitState(ctx context.Context, in *SaveUnitStateRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/SaveUnitState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ScheduleUnit(ctx context.Context, in *ScheduleUnitRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/ScheduleUnit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetUnitTargetState(ctx context.Context, in *ScheduledUnit, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/SetUnitTargetState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) UnscheduleUnit(ctx context.Context, in *UnscheduleUnitRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/UnscheduleUnit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) AgentEvents(ctx context.Context, in *MachineProperties, opts ...grpc.CallOption) (Registry_AgentEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Registry_serviceDesc.Streams[0], c.cc, "/rpc.Registry/AgentEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryAgentEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

func (c *registryClient) Status(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := grpc.Invoke(ctx, "/rpc.Registry/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type Registry_AgentEventsClient interface {
	Recv() (*UpdatedState, error)
	grpc.ClientStream
}

type registryAgentEventsClient struct {
	grpc.ClientStream
}

func (x *registryAgentEventsClient) Recv() (*UpdatedState, error) {
	m := new(UpdatedState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Registry service

type RegistryServer interface {
	// agents should request only the locally scheduled jobs
	GetScheduledUnits(context.Context, *UnitFilter) (*ScheduledUnits, error)
	// should _never_ be used? fleetctl only ?
	GetScheduledUnit(context.Context, *UnitName) (*MaybeScheduledUnit, error)
	// should _never_ be used ?
	GetUnit(context.Context, *UnitName) (*MaybeUnit, error)
	GetUnits(context.Context, *UnitFilter) (*Units, error)
	// global status <= pretty much like list-unit-files
	GetUnitStates(context.Context, *UnitStateFilter) (*UnitStates, error)
	ClearUnitHeartbeat(context.Context, *UnitName) (*GenericReply, error)
	CreateUnit(context.Context, *Unit) (*GenericReply, error)
	DestroyUnit(context.Context, *UnitName) (*GenericReply, error)
	UnitHeartbeat(context.Context, *Heartbeat) (*GenericReply, error)
	// mix heartbeat with *ttl''
	RemoveUnitState(context.Context, *UnitName) (*GenericReply, error)
	SaveUnitState(context.Context, *SaveUnitStateRequest) (*GenericReply, error)
	ScheduleUnit(context.Context, *ScheduleUnitRequest) (*GenericReply, error)
	SetUnitTargetState(context.Context, *ScheduledUnit) (*GenericReply, error)
	UnscheduleUnit(context.Context, *UnscheduleUnitRequest) (*GenericReply, error)
	AgentEvents(*MachineProperties, Registry_AgentEventsServer) error

	Status(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_GetScheduledUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UnitFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RegistryServer).GetScheduledUnits(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Registry_GetScheduledUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UnitName)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RegistryServer).GetScheduledUnit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Registry_GetUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UnitName)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RegistryServer).GetUnit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Registry_GetUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UnitFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RegistryServer).GetUnits(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Registry_GetUnitStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UnitStateFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RegistryServer).GetUnitStates(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Registry_ClearUnitHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UnitName)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RegistryServer).ClearUnitHeartbeat(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Registry_CreateUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Unit)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RegistryServer).CreateUnit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Registry_DestroyUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UnitName)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RegistryServer).DestroyUnit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Registry_UnitHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Heartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RegistryServer).UnitHeartbeat(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Registry_RemoveUnitState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UnitName)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RegistryServer).RemoveUnitState(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Registry_SaveUnitState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SaveUnitStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RegistryServer).SaveUnitState(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Registry_ScheduleUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ScheduleUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RegistryServer).ScheduleUnit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Registry_SetUnitTargetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ScheduledUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RegistryServer).SetUnitTargetState(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Registry_UnscheduleUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UnscheduleUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RegistryServer).UnscheduleUnit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Registry_AgentEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MachineProperties)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryServer).AgentEvents(m, &registryAgentEventsServer{stream})
}

func _Registry_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RegistryServer).Status(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type Registry_AgentEventsServer interface {
	Send(*UpdatedState) error
	grpc.ServerStream
}

type registryAgentEventsServer struct {
	grpc.ServerStream
}

func (x *registryAgentEventsServer) Send(m *UpdatedState) error {
	return x.ServerStream.SendMsg(m)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScheduledUnits",
			Handler:    _Registry_GetScheduledUnits_Handler,
		},
		{
			MethodName: "GetScheduledUnit",
			Handler:    _Registry_GetScheduledUnit_Handler,
		},
		{
			MethodName: "GetUnit",
			Handler:    _Registry_GetUnit_Handler,
		},
		{
			MethodName: "GetUnits",
			Handler:    _Registry_GetUnits_Handler,
		},
		{
			MethodName: "GetUnitStates",
			Handler:    _Registry_GetUnitStates_Handler,
		},
		{
			MethodName: "ClearUnitHeartbeat",
			Handler:    _Registry_ClearUnitHeartbeat_Handler,
		},
		{
			MethodName: "CreateUnit",
			Handler:    _Registry_CreateUnit_Handler,
		},
		{
			MethodName: "DestroyUnit",
			Handler:    _Registry_DestroyUnit_Handler,
		},
		{
			MethodName: "UnitHeartbeat",
			Handler:    _Registry_UnitHeartbeat_Handler,
		},
		{
			MethodName: "RemoveUnitState",
			Handler:    _Registry_RemoveUnitState_Handler,
		},
		{
			MethodName: "SaveUnitState",
			Handler:    _Registry_SaveUnitState_Handler,
		},
		{
			MethodName: "ScheduleUnit",
			Handler:    _Registry_ScheduleUnit_Handler,
		},
		{
			MethodName: "SetUnitTargetState",
			Handler:    _Registry_SetUnitTargetState_Handler,
		},
		{
			MethodName: "UnscheduleUnit",
			Handler:    _Registry_UnscheduleUnit_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Registry_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AgentEvents",
			Handler:       _Registry_AgentEvents_Handler,
			ServerStreams: true,
		},
	},
}

func (m *MachineProperties) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MachineProperties) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	return i, nil
}

func (m *UpdatedState) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdatedState) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UnitIds) > 0 {
		for _, s := range m.UnitIds {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *UnitStateFilter) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UnitStateFilter) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Hash) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.Hash)))
		i += copy(data[i:], m.Hash)
	}
	if len(m.LoadState) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.LoadState)))
		i += copy(data[i:], m.LoadState)
	}
	if len(m.ActiveState) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.ActiveState)))
		i += copy(data[i:], m.ActiveState)
	}
	if len(m.SubState) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.SubState)))
		i += copy(data[i:], m.SubState)
	}
	if len(m.MachineID) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.MachineID)))
		i += copy(data[i:], m.MachineID)
	}
	return i, nil
}

func (m *UnitFilter) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UnitFilter) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MachineID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.MachineID)))
		i += copy(data[i:], m.MachineID)
	}
	return i, nil
}

func (m *ScheduleUnitRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ScheduleUnitRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.MachineID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.MachineID)))
		i += copy(data[i:], m.MachineID)
	}
	return i, nil
}

func (m *UnscheduleUnitRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UnscheduleUnitRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.MachineID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.MachineID)))
		i += copy(data[i:], m.MachineID)
	}
	return i, nil
}

func (m *SaveUnitStateRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SaveUnitStateRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.State != nil {
		data[i] = 0x12
		i++
		i = encodeVarintFleet(data, i, uint64(m.State.Size()))
		n1, err := m.State.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.TTL != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintFleet(data, i, uint64(m.TTL))
	}
	return i, nil
}

func (m *Heartbeat) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Heartbeat) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.MachineID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.MachineID)))
		i += copy(data[i:], m.MachineID)
	}
	if m.TTL != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintFleet(data, i, uint64(m.TTL))
	}
	return i, nil
}

func (m *GenericReply) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GenericReply) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Units) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Units) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Units) > 0 {
		for _, msg := range m.Units {
			data[i] = 0xa
			i++
			i = encodeVarintFleet(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UnitStates) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UnitStates) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UnitStates) > 0 {
		for _, msg := range m.UnitStates {
			data[i] = 0xa
			i++
			i = encodeVarintFleet(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UnitState) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UnitState) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Hash) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.Hash)))
		i += copy(data[i:], m.Hash)
	}
	if len(m.LoadState) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.LoadState)))
		i += copy(data[i:], m.LoadState)
	}
	if len(m.ActiveState) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.ActiveState)))
		i += copy(data[i:], m.ActiveState)
	}
	if len(m.SubState) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.SubState)))
		i += copy(data[i:], m.SubState)
	}
	if len(m.MachineID) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.MachineID)))
		i += copy(data[i:], m.MachineID)
	}
	return i, nil
}

func (m *ScheduledUnits) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ScheduledUnits) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Units) > 0 {
		for _, msg := range m.Units {
			data[i] = 0xa
			i++
			i = encodeVarintFleet(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ScheduledUnit) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ScheduledUnit) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.CurrentState != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintFleet(data, i, uint64(m.CurrentState))
	}
	if len(m.MachineID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.MachineID)))
		i += copy(data[i:], m.MachineID)
	}
	return i, nil
}

func (m *UnitName) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UnitName) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *Unit) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Unit) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	data[i] = 0x12
	i++
	i = encodeVarintFleet(data, i, uint64(m.Unit.Size()))
	n2, err := m.Unit.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.DesiredState != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintFleet(data, i, uint64(m.DesiredState))
	}
	return i, nil
}

func (m *MaybeScheduledUnit) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MaybeScheduledUnit) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsScheduled != nil {
		nn3, err := m.IsScheduled.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *MaybeScheduledUnit_Unit) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Unit != nil {
		data[i] = 0xa
		i++
		i = encodeVarintFleet(data, i, uint64(m.Unit.Size()))
		n4, err := m.Unit.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *MaybeScheduledUnit_Notfound) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Notfound != nil {
		data[i] = 0x12
		i++
		i = encodeVarintFleet(data, i, uint64(m.Notfound.Size()))
		n5, err := m.Notfound.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *MaybeUnit) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MaybeUnit) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HasUnit != nil {
		nn6, err := m.HasUnit.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *MaybeUnit_Unit) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Unit != nil {
		data[i] = 0xa
		i++
		i = encodeVarintFleet(data, i, uint64(m.Unit.Size()))
		n7, err := m.Unit.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *MaybeUnit_Notfound) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Notfound != nil {
		data[i] = 0x12
		i++
		i = encodeVarintFleet(data, i, uint64(m.Notfound.Size()))
		n8, err := m.Notfound.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *NotFound) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NotFound) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UnitFile) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UnitFile) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UnitOptions) > 0 {
		for _, msg := range m.UnitOptions {
			data[i] = 0xa
			i++
			i = encodeVarintFleet(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UnitOption) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UnitOption) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Section) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.Section)))
		i += copy(data[i:], m.Section)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Value) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintFleet(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	return i, nil
}

func encodeFixed64Fleet(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Fleet(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintFleet(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *MachineProperties) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *UpdatedState) Size() (n int) {
	var l int
	_ = l
	if len(m.UnitIds) > 0 {
		for _, s := range m.UnitIds {
			l = len(s)
			n += 1 + l + sovFleet(uint64(l))
		}
	}
	return n
}

func (m *UnitStateFilter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.LoadState)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.ActiveState)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.SubState)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *UnitFilter) Size() (n int) {
	var l int
	_ = l
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *ScheduleUnitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *UnscheduleUnitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *SaveUnitStateRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFleet(uint64(l))
	}
	if m.TTL != 0 {
		n += 1 + sovFleet(uint64(m.TTL))
	}
	return n
}

func (m *Heartbeat) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	if m.TTL != 0 {
		n += 1 + sovFleet(uint64(m.TTL))
	}
	return n
}

func (m *GenericReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Units) Size() (n int) {
	var l int
	_ = l
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sovFleet(uint64(l))
		}
	}
	return n
}

func (m *UnitStates) Size() (n int) {
	var l int
	_ = l
	if len(m.UnitStates) > 0 {
		for _, e := range m.UnitStates {
			l = e.Size()
			n += 1 + l + sovFleet(uint64(l))
		}
	}
	return n
}

func (m *UnitState) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.LoadState)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.ActiveState)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.SubState)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *ScheduledUnits) Size() (n int) {
	var l int
	_ = l
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sovFleet(uint64(l))
		}
	}
	return n
}

func (m *ScheduledUnit) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	if m.CurrentState != 0 {
		n += 1 + sovFleet(uint64(m.CurrentState))
	}
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *UnitName) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *Unit) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = m.Unit.Size()
	n += 1 + l + sovFleet(uint64(l))
	if m.DesiredState != 0 {
		n += 1 + sovFleet(uint64(m.DesiredState))
	}
	return n
}

func (m *MaybeScheduledUnit) Size() (n int) {
	var l int
	_ = l
	if m.IsScheduled != nil {
		n += m.IsScheduled.Size()
	}
	return n
}

func (m *MaybeScheduledUnit_Unit) Size() (n int) {
	var l int
	_ = l
	if m.Unit != nil {
		l = m.Unit.Size()
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}
func (m *MaybeScheduledUnit_Notfound) Size() (n int) {
	var l int
	_ = l
	if m.Notfound != nil {
		l = m.Notfound.Size()
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}
func (m *MaybeUnit) Size() (n int) {
	var l int
	_ = l
	if m.HasUnit != nil {
		n += m.HasUnit.Size()
	}
	return n
}

func (m *MaybeUnit_Unit) Size() (n int) {
	var l int
	_ = l
	if m.Unit != nil {
		l = m.Unit.Size()
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}
func (m *MaybeUnit_Notfound) Size() (n int) {
	var l int
	_ = l
	if m.Notfound != nil {
		l = m.Notfound.Size()
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}
func (m *NotFound) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UnitFile) Size() (n int) {
	var l int
	_ = l
	if len(m.UnitOptions) > 0 {
		for _, e := range m.UnitOptions {
			l = e.Size()
			n += 1 + l + sovFleet(uint64(l))
		}
	}
	return n
}

func (m *UnitOption) Size() (n int) {
	var l int
	_ = l
	l = len(m.Section)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func sovFleet(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFleet(x uint64) (n int) {
	return sovFleet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MachineProperties) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MachineProperties{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdatedState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdatedState{`,
		`UnitIds:` + fmt.Sprintf("%v", this.UnitIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnitStateFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnitStateFilter{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`LoadState:` + fmt.Sprintf("%v", this.LoadState) + `,`,
		`ActiveState:` + fmt.Sprintf("%v", this.ActiveState) + `,`,
		`SubState:` + fmt.Sprintf("%v", this.SubState) + `,`,
		`MachineID:` + fmt.Sprintf("%v", this.MachineID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnitFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnitFilter{`,
		`MachineID:` + fmt.Sprintf("%v", this.MachineID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScheduleUnitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScheduleUnitRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`MachineID:` + fmt.Sprintf("%v", this.MachineID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnscheduleUnitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnscheduleUnitRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`MachineID:` + fmt.Sprintf("%v", this.MachineID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SaveUnitStateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SaveUnitStateRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`State:` + strings.Replace(fmt.Sprintf("%v", this.State), "UnitState", "UnitState", 1) + `,`,
		`TTL:` + fmt.Sprintf("%v", this.TTL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Heartbeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Heartbeat{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`MachineID:` + fmt.Sprintf("%v", this.MachineID) + `,`,
		`TTL:` + fmt.Sprintf("%v", this.TTL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenericReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenericReply{`,
		`}`,
	}, "")
	return s
}
func (this *Units) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Units{`,
		`Units:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Units), "Unit", "Unit", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnitStates) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnitStates{`,
		`UnitStates:` + strings.Replace(fmt.Sprintf("%v", this.UnitStates), "UnitState", "UnitState", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnitState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnitState{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`LoadState:` + fmt.Sprintf("%v", this.LoadState) + `,`,
		`ActiveState:` + fmt.Sprintf("%v", this.ActiveState) + `,`,
		`SubState:` + fmt.Sprintf("%v", this.SubState) + `,`,
		`MachineID:` + fmt.Sprintf("%v", this.MachineID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScheduledUnits) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScheduledUnits{`,
		`Units:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Units), "ScheduledUnit", "ScheduledUnit", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScheduledUnit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScheduledUnit{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`CurrentState:` + fmt.Sprintf("%v", this.CurrentState) + `,`,
		`MachineID:` + fmt.Sprintf("%v", this.MachineID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnitName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnitName{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Unit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Unit{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Unit:` + strings.Replace(strings.Replace(this.Unit.String(), "UnitFile", "UnitFile", 1), `&`, ``, 1) + `,`,
		`DesiredState:` + fmt.Sprintf("%v", this.DesiredState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaybeScheduledUnit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaybeScheduledUnit{`,
		`IsScheduled:` + fmt.Sprintf("%v", this.IsScheduled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaybeScheduledUnit_Unit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaybeScheduledUnit_Unit{`,
		`Unit:` + strings.Replace(fmt.Sprintf("%v", this.Unit), "ScheduledUnit", "ScheduledUnit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaybeScheduledUnit_Notfound) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaybeScheduledUnit_Notfound{`,
		`Notfound:` + strings.Replace(fmt.Sprintf("%v", this.Notfound), "NotFound", "NotFound", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaybeUnit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaybeUnit{`,
		`HasUnit:` + fmt.Sprintf("%v", this.HasUnit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaybeUnit_Unit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaybeUnit_Unit{`,
		`Unit:` + strings.Replace(fmt.Sprintf("%v", this.Unit), "Unit", "Unit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaybeUnit_Notfound) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaybeUnit_Notfound{`,
		`Notfound:` + strings.Replace(fmt.Sprintf("%v", this.Notfound), "NotFound", "NotFound", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotFound) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotFound{`,
		`}`,
	}, "")
	return s
}
func (this *UnitFile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnitFile{`,
		`UnitOptions:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UnitOptions), "UnitOption", "UnitOption", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnitOption) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnitOption{`,
		`Section:` + fmt.Sprintf("%v", this.Section) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFleet(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MachineProperties) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachineProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachineProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatedState) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatedState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatedState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnitIds = append(m.UnitIds, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitStateFilter) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitStateFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitStateFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadState = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveState = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubState = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitFilter) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduleUnitRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleUnitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleUnitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnscheduleUnitRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnscheduleUnitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnscheduleUnitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveUnitStateRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveUnitStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveUnitStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &UnitState{}
			}
			if err := m.State.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTL", wireType)
			}
			m.TTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TTL |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Heartbeat) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Heartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Heartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTL", wireType)
			}
			m.TTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TTL |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericReply) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Units) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Units: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Units: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, Unit{})
			if err := m.Units[len(m.Units)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitStates) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitStates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitStates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnitStates = append(m.UnitStates, &UnitState{})
			if err := m.UnitStates[len(m.UnitStates)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitState) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadState = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveState = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubState = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledUnits) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledUnits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledUnits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, ScheduledUnit{})
			if err := m.Units[len(m.Units)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledUnit) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentState", wireType)
			}
			m.CurrentState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CurrentState |= (TargetState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitName) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Unit) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Unit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Unit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Unit.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredState", wireType)
			}
			m.DesiredState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DesiredState |= (TargetState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaybeScheduledUnit) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaybeScheduledUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaybeScheduledUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScheduledUnit{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IsScheduled = &MaybeScheduledUnit_Unit{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notfound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NotFound{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IsScheduled = &MaybeScheduledUnit_Notfound{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaybeUnit) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaybeUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaybeUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Unit{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HasUnit = &MaybeUnit_Unit{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notfound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NotFound{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HasUnit = &MaybeUnit_Notfound{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotFound) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotFound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotFound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitFile) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnitOptions = append(m.UnitOptions, UnitOption{})
			if err := m.UnitOptions[len(m.UnitOptions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitOption) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Section", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Section = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFleet(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFleet
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFleet
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFleet(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFleet = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFleet   = fmt.Errorf("proto: integer overflow")
	fileDescriptor0       = []byte{
		// 209 bytes of a gzipped FileDescriptorProto
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x48, 0x4d, 0xcc,
		0x29, 0xc9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4e, 0x2f, 0x2a, 0x48, 0xd6, 0x83,
		0x0a, 0x95, 0x19, 0x26, 0xe6, 0x14, 0x64, 0x24, 0x2a, 0xe9, 0x71, 0x09, 0x79, 0x80, 0x45, 0x9c,
		0x33, 0x52, 0x93, 0xb3, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x24, 0xb8, 0xd8, 0x8b,
		0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0xa5,
		0x85, 0x8c, 0x5c, 0xc2, 0x28, 0x1a, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0xfc, 0xb8, 0xd8,
		0x8a, 0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0xc1, 0x1a, 0xf8, 0x8c, 0xcc, 0xf4, 0xb0, 0xd8, 0xa6, 0x87,
		0x45, 0xa7, 0x5e, 0x30, 0xc8, 0xe4, 0xbc, 0xf4, 0x60, 0xb0, 0xee, 0x20, 0xa8, 0x29, 0x4a, 0x56,
		0x5c, 0xbc, 0x28, 0x12, 0x42, 0xdc, 0x5c, 0xec, 0xa1, 0x7e, 0xde, 0x7e, 0xfe, 0xe1, 0x7e, 0x02,
		0x0c, 0x20, 0x4e, 0xb0, 0x6b, 0x50, 0x98, 0xa7, 0x9f, 0xbb, 0x00, 0xa3, 0x10, 0x3f, 0x17, 0xb7,
		0x9f, 0x7f, 0x48, 0x3c, 0x4c, 0x80, 0xc9, 0x28, 0x85, 0x8b, 0x0d, 0x62, 0x91, 0x50, 0x14, 0x17,
		0x2b, 0xd8, 0x32, 0x21, 0x75, 0xc2, 0xce, 0x01, 0xfb, 0x5c, 0x4a, 0x83, 0x58, 0x77, 0x27, 0xb1,
		0x81, 0x43, 0xd5, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x3f, 0xd0, 0xe1, 0x65, 0x01, 0x00,
		0x00,
	}
)
